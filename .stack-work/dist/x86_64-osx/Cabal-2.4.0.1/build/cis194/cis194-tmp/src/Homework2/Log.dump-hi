
==================== FINAL INTERFACE ====================
2019-04-17 18:49:08.595006 UTC

interface main:Homework2.Log 8064
  interface hash: 852ab71a67a3f4e23a33b950e258e9a4
  ABI hash: e6f52db7b5f6a0acc1b0f09fa2d11634
  export-list hash: 45b040dd2f64550e0e510d5782725c25
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cf69b6dcd9c17bb31b8cf3254ab01e2f
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Homework2.Log.testParse
  Homework2.Log.testWhatWentWrong
  Homework2.Log.LogMessage{Homework2.Log.LogMessage Homework2.Log.Unknown}
  Homework2.Log.MessageTree{Homework2.Log.Leaf Homework2.Log.Node}
  Homework2.Log.MessageType{Homework2.Log.Error Homework2.Log.Info Homework2.Log.Warning}
  Homework2.Log.TimeStamp
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Applicative 2ae514eb141d45774730765c61bb41c0
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.IO 898d4ddbf00eb4732e5f462760aa42ae
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:System.IO c961e5ee6731c0683a6e879272c9e9f6
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
80ad0a5c0df2cec63d204c8e652eb206
  $fEqLogMessage :: GHC.Classes.Eq Homework2.Log.LogMessage
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Homework2.Log.LogMessage
                  Homework2.Log.$fEqLogMessage_$c==
                  Homework2.Log.$fEqLogMessage_$c/= -}
80ad0a5c0df2cec63d204c8e652eb206
  $fEqLogMessage_$c/= ::
    Homework2.Log.LogMessage
    -> Homework2.Log.LogMessage -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Homework2.Log.LogMessage)
                   (y :: Homework2.Log.LogMessage) ->
                 case Homework2.Log.$fEqLogMessage_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
80ad0a5c0df2cec63d204c8e652eb206
  $fEqLogMessage_$c== ::
    Homework2.Log.LogMessage
    -> Homework2.Log.LogMessage -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Homework2.Log.LogMessage)
                   (ds1 :: Homework2.Log.LogMessage) ->
                 case ds of wild {
                   Homework2.Log.LogMessage a1 a2 a3
                   -> case ds1 of wild1 {
                        Homework2.Log.LogMessage b1 b2 b3
                        -> let {
                             $j :: GHC.Types.Bool <join 0>
                             = case a2 of wild2 { GHC.Types.I# x ->
                               case b2 of wild3 { GHC.Types.I# y ->
                               case GHC.Prim.==# x y of lwild {
                                 DEFAULT -> GHC.Types.False 1# -> GHC.Base.eqString a3 b3 } } }
                           } in
                           case a1 of wild2 {
                             Homework2.Log.Info
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False Homework2.Log.Info -> $j }
                             Homework2.Log.Warning
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False Homework2.Log.Warning -> $j }
                             Homework2.Log.Error a4
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Homework2.Log.Error b4
                                  -> case a4 of wild4 { GHC.Types.I# x ->
                                     case b4 of wild5 { GHC.Types.I# y ->
                                     case GHC.Prim.==# x y of lwild {
                                       DEFAULT -> GHC.Types.False 1# -> $j } } } } }
                        Homework2.Log.Unknown ipv -> GHC.Types.False }
                   Homework2.Log.Unknown a1
                   -> case ds1 of wild1 {
                        Homework2.Log.LogMessage ipv ipv1 ipv2 -> GHC.Types.False
                        Homework2.Log.Unknown b1 -> GHC.Base.eqString a1 b1 } }) -}
e076e9f0fb212b8b7be32ae9c4ba06f9
  $fEqMessageTree :: GHC.Classes.Eq Homework2.Log.MessageTree
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Homework2.Log.MessageTree
                  Homework2.Log.$fEqMessageTree_$c==
                  Homework2.Log.$fEqMessageTree_$c/= -}
e076e9f0fb212b8b7be32ae9c4ba06f9
  $fEqMessageTree_$c/= ::
    Homework2.Log.MessageTree
    -> Homework2.Log.MessageTree -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Homework2.Log.MessageTree)
                   (y :: Homework2.Log.MessageTree) ->
                 case Homework2.Log.$fEqMessageTree_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e076e9f0fb212b8b7be32ae9c4ba06f9
  $fEqMessageTree_$c== ::
    Homework2.Log.MessageTree
    -> Homework2.Log.MessageTree -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
292079d11aa5c9de0d5d59144d979948
  $fEqMessageType :: GHC.Classes.Eq Homework2.Log.MessageType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Homework2.Log.MessageType
                  Homework2.Log.$fEqMessageType_$c==
                  Homework2.Log.$fEqMessageType_$c/= -}
292079d11aa5c9de0d5d59144d979948
  $fEqMessageType_$c/= ::
    Homework2.Log.MessageType
    -> Homework2.Log.MessageType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Homework2.Log.MessageType)
                   (y :: Homework2.Log.MessageType) ->
                 case x of wild {
                   Homework2.Log.Info
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Homework2.Log.Info -> GHC.Types.False }
                   Homework2.Log.Warning
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Homework2.Log.Warning -> GHC.Types.False }
                   Homework2.Log.Error a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Homework2.Log.Error b1
                        -> case GHC.Classes.eqInt a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
292079d11aa5c9de0d5d59144d979948
  $fEqMessageType_$c== ::
    Homework2.Log.MessageType
    -> Homework2.Log.MessageType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Homework2.Log.MessageType)
                   (ds1 :: Homework2.Log.MessageType) ->
                 case ds of wild {
                   Homework2.Log.Info
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Homework2.Log.Info -> GHC.Types.True }
                   Homework2.Log.Warning
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Homework2.Log.Warning -> GHC.Types.True }
                   Homework2.Log.Error a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Homework2.Log.Error b1 -> GHC.Classes.eqInt a1 b1 } }) -}
80ad0a5c0df2cec63d204c8e652eb206
  $fShowLogMessage :: GHC.Show.Show Homework2.Log.LogMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Homework2.Log.LogMessage
                  Homework2.Log.$fShowLogMessage_$cshowsPrec1
                  Homework2.Log.$fShowLogMessage_$cshow
                  Homework2.Log.$fShowLogMessage_$cshowList -}
80ad0a5c0df2cec63d204c8e652eb206
  $fShowLogMessage1 :: Homework2.Log.LogMessage -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Homework2.Log.LogMessage)
                   (w1 :: GHC.Base.String) ->
                 Homework2.Log.$w$cshowsPrec 0# w w1) -}
5d46402783c898b65f8239b07d95c64a
  $fShowLogMessage10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
fae8641d92bd3999a185ac3358aee053
  $fShowLogMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unknown "#) -}
7cecfcf63471ce9040000a88f5d73069
  $fShowLogMessage3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
1ab3d5dbcd315729dc30c934fa169ba8
  $fShowLogMessage4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error "#) -}
d17230ffcd1ddb4bb2ecd6b2b417f7e9
  $fShowLogMessage5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Homework2.Log.$fShowLogMessage6) -}
b8fce47c85bf2df48e0eb845bad168bf
  $fShowLogMessage6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Warning"#) -}
4587d3280b3ddb2b6a989679a2bb1686
  $fShowLogMessage7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Homework2.Log.$fShowLogMessage8) -}
561d6152b812c6e6e0d0d1a3daf4495b
  $fShowLogMessage8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Info"#) -}
c69f60e49b2f7ee4356df581e82074b9
  $fShowLogMessage9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogMessage "#) -}
80ad0a5c0df2cec63d204c8e652eb206
  $fShowLogMessage_$cshow ::
    Homework2.Log.LogMessage -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Homework2.Log.LogMessage) ->
                 Homework2.Log.$fShowLogMessage_$cshowsPrec1
                   Homework2.Log.$fShowLogMessage10
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
80ad0a5c0df2cec63d204c8e652eb206
  $fShowLogMessage_$cshowList ::
    [Homework2.Log.LogMessage] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Homework2.Log.LogMessage]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Homework2.Log.LogMessage
                   Homework2.Log.$fShowLogMessage1
                   ls
                   s) -}
292079d11aa5c9de0d5d59144d979948
  $fShowLogMessage_$cshowsPrec ::
    GHC.Types.Int -> Homework2.Log.MessageType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Homework2.Log.MessageType)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Homework2.Log.Info
                   -> GHC.Base.++ @ GHC.Types.Char Homework2.Log.$fShowLogMessage7 eta
                   Homework2.Log.Warning
                   -> GHC.Base.++ @ GHC.Types.Char Homework2.Log.$fShowLogMessage5 eta
                   Homework2.Log.Error b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Homework2.Log.$fShowLogMessage4
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 eta of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Homework2.Log.$fShowLogMessage4
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } } }) -}
80ad0a5c0df2cec63d204c8e652eb206
  $fShowLogMessage_$cshowsPrec1 ::
    GHC.Types.Int -> Homework2.Log.LogMessage -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Homework2.Log.LogMessage)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Homework2.Log.$w$cshowsPrec ww1 w1 w2 }) -}
e076e9f0fb212b8b7be32ae9c4ba06f9
  $fShowMessageTree :: GHC.Show.Show Homework2.Log.MessageTree
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Homework2.Log.MessageTree
                  Homework2.Log.$fShowMessageTree_$cshowsPrec
                  Homework2.Log.$fShowMessageTree_$cshow
                  Homework2.Log.$fShowMessageTree_$cshowList -}
e076e9f0fb212b8b7be32ae9c4ba06f9
  $fShowMessageTree1 :: Homework2.Log.MessageTree -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Homework2.Log.$fShowMessageTree_$cshowsPrec
                   Homework2.Log.$fShowLogMessage10) -}
e076e9f0fb212b8b7be32ae9c4ba06f9
  $fShowMessageTree_$cshow ::
    Homework2.Log.MessageTree -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Homework2.Log.MessageTree) ->
                 Homework2.Log.$fShowMessageTree_$cshowsPrec
                   Homework2.Log.$fShowLogMessage10
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e076e9f0fb212b8b7be32ae9c4ba06f9
  $fShowMessageTree_$cshowList ::
    [Homework2.Log.MessageTree] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Homework2.Log.MessageTree]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Homework2.Log.MessageTree
                   Homework2.Log.$fShowMessageTree1
                   ls
                   s) -}
e076e9f0fb212b8b7be32ae9c4ba06f9
  $fShowMessageTree_$cshowsPrec ::
    GHC.Types.Int -> Homework2.Log.MessageTree -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
292079d11aa5c9de0d5d59144d979948
  $fShowMessageType :: GHC.Show.Show Homework2.Log.MessageType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Homework2.Log.MessageType
                  Homework2.Log.$fShowLogMessage_$cshowsPrec
                  Homework2.Log.$fShowMessageType_$cshow
                  Homework2.Log.$fShowMessageType_$cshowList -}
292079d11aa5c9de0d5d59144d979948
  $fShowMessageType1 :: Homework2.Log.MessageType -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Homework2.Log.$fShowLogMessage_$cshowsPrec
                   Homework2.Log.$fShowLogMessage10) -}
292079d11aa5c9de0d5d59144d979948
  $fShowMessageType_$cshow ::
    Homework2.Log.MessageType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Homework2.Log.MessageType) ->
                 case x of wild {
                   Homework2.Log.Info -> Homework2.Log.$fShowLogMessage7
                   Homework2.Log.Warning -> Homework2.Log.$fShowLogMessage5
                   Homework2.Log.Error b1
                   -> GHC.CString.unpackAppendCString#
                        Homework2.Log.$fShowLogMessage4
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }) -}
292079d11aa5c9de0d5d59144d979948
  $fShowMessageType_$cshowList ::
    [Homework2.Log.MessageType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Homework2.Log.MessageType]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Homework2.Log.MessageType
                   Homework2.Log.$fShowMessageType1
                   ls
                   s) -}
a99ff38a4a19fb63c129faae24a3e309
  $tc'Error :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14174160315157477082##
                   3643372987412895880##
                   Homework2.Log.$trModule
                   Homework2.Log.$tc'Error2
                   0#
                   Homework2.Log.$tc'Error1) -}
42b0671f9abc7cfa176911596580a2e4
  $tc'Error1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c00dc96e555a9317e80fde044c601fad
  $tc'Error2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$tc'Error3) -}
41b62bea51f28ad38a6fd6dda32390ee
  $tc'Error3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Error"#) -}
672786b087ae269306a078398d9105a8
  $tc'Info :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16061488442336261026##
                   17319461500296131800##
                   Homework2.Log.$trModule
                   Homework2.Log.$tc'Info2
                   0#
                   Homework2.Log.$tc'Info1) -}
236a750bc0a4d43e164cd7af54981b8f
  $tc'Info1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
eb31cfa7536fa46f81ad421bcfa7ac03
  $tc'Info2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$tc'Info3) -}
ed83e4f8a59bed27d0c1812e7e2b819f
  $tc'Info3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Info"#) -}
291f39c9d2746c54b80ce772aa37c9af
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10762095828665340700##
                   7444170397338521898##
                   Homework2.Log.$trModule
                   Homework2.Log.$tc'Leaf2
                   0#
                   Homework2.Log.$tc'Leaf1) -}
0ae4864948a6b5ecd7fadf073b6b9a1b
  $tc'Leaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
c6e6d917459ddf7df2c77a0d2027ebc6
  $tc'Leaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$tc'Leaf3) -}
5f3af6582d6b92678067741bb9897ed9
  $tc'Leaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Leaf"#) -}
ccbb69acefbcfb75d4724e89477c9d14
  $tc'LogMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11518398421185826525##
                   5606043015464170496##
                   Homework2.Log.$trModule
                   Homework2.Log.$tc'LogMessage2
                   0#
                   Homework2.Log.$tc'LogMessage1) -}
58d2c3d20350a84babdebc4872f39287
  $tc'LogMessage1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6c06f3262598b37c2f998d0e1a5a69e1
  $tc'LogMessage2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$tc'LogMessage3) -}
74abd1ac10731b5b6206ac2522e7decd
  $tc'LogMessage3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogMessage"#) -}
aed2e56a5ebb89d29ab6796cd8a8baa3
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4401629637896586943##
                   9231116778311290202##
                   Homework2.Log.$trModule
                   Homework2.Log.$tc'Node2
                   0#
                   Homework2.Log.$tc'Node1) -}
f0b6e98da4ea0d567631cdeb728ba82a
  $tc'Node1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
65c9b6217b0a6b68a3b8c5c8a58984d1
  $tc'Node2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$tc'Node3) -}
f8db3cedbb3ce4f14aba8e81b4a4dad6
  $tc'Node3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Node"#) -}
b3fd90a2dab72c66c751dfb1d15e5f54
  $tc'Unknown :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13997260186374347778##
                   13371290205772004563##
                   Homework2.Log.$trModule
                   Homework2.Log.$tc'Unknown2
                   0#
                   Homework2.Log.$tc'Unknown1) -}
43daaf402f01ae9577725a3cb48d0a02
  $tc'Unknown1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
16b9065c23c663ac32c1669fd1591d0e
  $tc'Unknown2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$tc'Unknown3) -}
c2213b658114617c55452e4c20604fee
  $tc'Unknown3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unknown"#) -}
9e106e58c96ca853e74caa28e5a25e84
  $tc'Warning :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1268981868729914424##
                   9676152023656090869##
                   Homework2.Log.$trModule
                   Homework2.Log.$tc'Warning1
                   0#
                   Homework2.Log.$tc'Info1) -}
38ceaf21ba8f2bc2856fec5bfb40a67a
  $tc'Warning1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$tc'Warning2) -}
59952f1f3e9e249b8acd1b8ff0a7255c
  $tc'Warning2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Warning"#) -}
b814318efd4936fe6a15d8b6b0e31908
  $tcLogMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12693864473550808899##
                   15628070998197884897##
                   Homework2.Log.$trModule
                   Homework2.Log.$tcLogMessage1
                   0#
                   GHC.Types.krep$*) -}
05b4c76e87b834cc39b4737b1e5bdd38
  $tcLogMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$tcLogMessage2) -}
6e5d0228678566f3cfeb02f52c4ecb5a
  $tcLogMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogMessage"#) -}
cef6acbb2dce5b9ae07f3533fd9bf310
  $tcMessageTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12592454405321295127##
                   64658011063590325##
                   Homework2.Log.$trModule
                   Homework2.Log.$tcMessageTree1
                   0#
                   GHC.Types.krep$*) -}
7b5cf352d2c2c808c44c36b81b29ccaf
  $tcMessageTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$tcMessageTree2) -}
548621202365ac6f92d9f54dc910bb52
  $tcMessageTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MessageTree"#) -}
dc8b18cf7afe37c0242ffed42a00206c
  $tcMessageType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   469678268400667146##
                   13802969642468158805##
                   Homework2.Log.$trModule
                   Homework2.Log.$tcMessageType1
                   0#
                   GHC.Types.krep$*) -}
f9db38b46b18db5620ec31714dbf3883
  $tcMessageType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$tcMessageType2) -}
3023331b25e39ef10f44b0eca11af629
  $tcMessageType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MessageType"#) -}
09112bf1cefc205942ba8af65d73b63d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Homework2.Log.$trModule3
                   Homework2.Log.$trModule1) -}
7b5285bc6fb3c6f5ccbd77d7e5b30662
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$trModule2) -}
9fbbc1444670a2ce54758402404fa2cb
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Homework2.Log"#) -}
8ec72c5db94b67e6bab429db6cdd4201
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Homework2.Log.$trModule4) -}
7616fa8c3ace0845bbbf6d5724e6190b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
80ad0a5c0df2cec63d204c8e652eb206
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Homework2.Log.LogMessage -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Homework2.Log.LogMessage)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Homework2.Log.LogMessage b1 b2 b3
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String)[OneShot] ->
                          GHC.CString.unpackAppendCString#
                            Homework2.Log.$fShowLogMessage9
                            (Homework2.Log.$fShowLogMessage_$cshowsPrec
                               Homework2.Log.$fShowLogMessage3
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of ww2 { GHC.Types.I# ww3 ->
                                   case GHC.Show.$wshowSignedInt
                                          11#
                                          ww3
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)3
                                                (GHC.Show.showLitString
                                                   b3
                                                   (GHC.Types.:
                                                      @ GHC.Types.Char
                                                      GHC.Show.$fShow(,)3
                                                      x)))) of ww4 { (#,#) ww5 ww6 ->
                                   GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT -> p w1
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }
                   Homework2.Log.Unknown b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Homework2.Log.$fShowLogMessage2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Homework2.Log.$fShowLogMessage2
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1))))) } }) -}
80ad0a5c0df2cec63d204c8e652eb206
  data LogMessage
    = LogMessage Homework2.Log.MessageType
                 Homework2.Log.TimeStamp
                 GHC.Base.String
    | Unknown GHC.Base.String
e076e9f0fb212b8b7be32ae9c4ba06f9
  data MessageTree
    = Leaf
    | Node Homework2.Log.MessageTree
           Homework2.Log.LogMessage
           Homework2.Log.MessageTree
292079d11aa5c9de0d5d59144d979948
  data MessageType = Info | Warning | Error GHC.Types.Int
01047b7559807bd6f535d7c869829192
  type TimeStamp = GHC.Types.Int
3ddca559eea2fe99259457c99eedf2a1
  testParse ::
    (GHC.Base.String -> [Homework2.Log.LogMessage])
    -> GHC.Types.Int
    -> GHC.IO.FilePath
    -> GHC.Types.IO [Homework2.Log.LogMessage]
  {- Arity: 4, Strictness: <L,1*C1(U)><L,1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Homework2.Log.testParse1
                  `cast`
                (<GHC.Base.String -> [Homework2.Log.LogMessage]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[Homework2.Log.LogMessage]>_R)) -}
ada80a8d013bf0a2207d9bc49e953981
  testParse1 ::
    (GHC.Base.String -> [Homework2.Log.LogMessage])
    -> GHC.Types.Int
    -> GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [Homework2.Log.LogMessage] #)
  {- Arity: 4, Strictness: <L,1*C1(U)><L,1*U(U)><L,U><S,U>,
     Unfolding: (\ (parse :: GHC.Base.String
                             -> [Homework2.Log.LogMessage])
                   (n :: GHC.Types.Int)
                   (file :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        file
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    case n of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.<# 0# y of lwild {
                      DEFAULT -> GHC.Types.[] @ Homework2.Log.LogMessage
                      1#
                      -> GHC.List.$wunsafeTake
                           @ Homework2.Log.LogMessage
                           y
                           (parse ipv3) } } #) } }) -}
cd97d752567a50864b1986013374badb
  testWhatWentWrong ::
    (GHC.Base.String -> [Homework2.Log.LogMessage])
    -> ([Homework2.Log.LogMessage] -> [GHC.Base.String])
    -> GHC.IO.FilePath
    -> GHC.Types.IO [GHC.Base.String]
  {- Arity: 4, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Homework2.Log.testWhatWentWrong1
                  `cast`
                (<GHC.Base.String -> [Homework2.Log.LogMessage]>_R
                 ->_R <[Homework2.Log.LogMessage] -> [GHC.Base.String]>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)) -}
fc63bb36927098056b16a7ab76d5bfcd
  testWhatWentWrong1 ::
    (GHC.Base.String -> [Homework2.Log.LogMessage])
    -> ([Homework2.Log.LogMessage] -> [GHC.Base.String])
    -> GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 4, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (parse :: GHC.Base.String -> [Homework2.Log.LogMessage])
                   (whatWentWrong :: [Homework2.Log.LogMessage] -> [GHC.Base.String])
                   (file :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        file
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2, whatWentWrong (parse ipv3) #) } }) -}
instance [safe] GHC.Classes.Eq [Homework2.Log.LogMessage]
  = Homework2.Log.$fEqLogMessage
instance [safe] GHC.Classes.Eq [Homework2.Log.MessageTree]
  = Homework2.Log.$fEqMessageTree
instance [safe] GHC.Classes.Eq [Homework2.Log.MessageType]
  = Homework2.Log.$fEqMessageType
instance [safe] GHC.Show.Show [Homework2.Log.LogMessage]
  = Homework2.Log.$fShowLogMessage
instance [safe] GHC.Show.Show [Homework2.Log.MessageTree]
  = Homework2.Log.$fShowMessageTree
instance [safe] GHC.Show.Show [Homework2.Log.MessageType]
  = Homework2.Log.$fShowMessageType
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

